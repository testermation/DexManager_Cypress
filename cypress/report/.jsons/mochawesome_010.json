{
  "stats": {
    "suites": 1,
    "tests": 2,
    "passes": 0,
    "pending": 0,
    "failures": 2,
    "start": "2024-05-20T16:42:49.750Z",
    "end": "2024-05-20T16:42:52.045Z",
    "duration": 2295,
    "testsRegistered": 1,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c3843233-1ccf-4fb1-bcc1-a135428009d1",
      "title": "",
      "fullFile": "cypress\\e2e\\tests\\CP15PP.cy.js",
      "file": "cypress\\e2e\\tests\\CP15PP.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7bfce491-f61c-4b35-a296-1d19743f6926",
          "title": "Activar DEX STORE",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "CP15PP",
              "fullTitle": "Activar DEX STORE CP15PP",
              "timedOut": null,
              "duration": 324,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      \"\\\\CP15PP.cy.js\\\\Activar DEX STORE -- CP15PP (failed) (1).png\"\n    ]\n  ]\n}",
              "code": "// const testName = this.testName\ncy.goToLogin(); //Comando para ir a la pagina de Login\n_loginPage.default.loginTestemation(_config.default); //FunciÃ³n login con las credencias de testermation alojadas en config.js\n//globalPage.goToTenant(config);\nconst clientName = await _globalPage.default.readComboTenant();\ncy.log(\"CLIENTNAME=\" + clientName);\nif (clientName == _config.default.client) {\n  cy.log(\"tenant correcto\");\n} else {\n  cy.log(\"tenant incorrecto\");\n  cy.screenshot({\n    capture: 'runner'\n  }); // Captura en tenant incorrecto\n  _globalPage.default.changeTenant(_config.default);\n}\ncy.wait(2000);\n_dashboardPage.default.clickMenuSetting();\n_dashboardPage.default.clickOptionGeneral();\ncy.wait(1000); // espera para la captura\ncy.screenshot({\n  capture: 'runner'\n}); // DexStore inactivo \ncy.wait(1000); // espera post captura\n_generalPage.default.clickToogleDS(); // Se hace click en el toogle de DEX STORE\n_generalPage.default.clickBottomSave();\ncy.wait(500); // espera para la captura\ncy.screenshot({\n  capture: 'runner'\n}); // DexStore activo",
              "err": {
                "message": "CypressError: Cypress detected that you returned a promise from a command while also invoking one or more cy commands in that promise.\n\nThe command that returned the promise was:\n\n  > `cy.visit()`\n\nThe cy command you invoked inside the promise was:\n\n  > `cy.log()`\n\nBecause Cypress commands are already promise-like, you don't need to wrap them or return your own promise.\n\nCypress will resolve your command with whatever the final Cypress command yields.\n\nThe reason this is an error instead of a warning is because Cypress internally queues commands serially whereas Promises execute as soon as they are invoked. Attempting to reconcile this would prevent Cypress from ever resolving.",
                "estack": "CypressError: Cypress detected that you returned a promise from a command while also invoking one or more cy commands in that promise.\n\nThe command that returned the promise was:\n\n  > `cy.visit()`\n\nThe cy command you invoked inside the promise was:\n\n  > `cy.log()`\n\nBecause Cypress commands are already promise-like, you don't need to wrap them or return your own promise.\n\nCypress will resolve your command with whatever the final Cypress command yields.\n\nThe reason this is an error instead of a warning is because Cypress internally queues commands serially whereas Promises execute as soon as they are invoked. Attempting to reconcile this would prevent Cypress from ever resolving.\n    at cy.<computed> [as log] (https://demo4.dexmanager.com/__cypress/runner/cypress_runner.js:138874:64)",
                "diff": null
              },
              "uuid": "e2157530-5ce1-45fd-99fc-7d0b92959100",
              "parentUUID": "7bfce491-f61c-4b35-a296-1d19743f6926",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "e2157530-5ce1-45fd-99fc-7d0b92959100"
          ],
          "pending": [],
          "skipped": [],
          "duration": 324,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress\\report\\.jsons",
        "charts": true,
        "reportPageTitle": "Suit_Login_Result",
        "embeddedScreenshots": true,
        "inlineAssets": true,
        "saveAllAttempts": false,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}